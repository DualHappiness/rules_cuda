load(":defs.bzl", "if_linux", "if_local_cuda", "if_windows")

package(
    default_visibility = ["//visibility:public"],
)

filegroup(
    name = "compiler_deps",
    srcs = [
        ":_cuda_header_files",
    ] + glob([
        "cuda/version.txt",
        "cuda/bin/**",
        "cuda/lib64/**",
        "cuda/nvvm/**",
    ]),
)

filegroup(
    name = "_cuda_header_files",
    srcs = glob(["cuda/include/**"]),
    visibility = ["//visibility:private"],
)

cc_library(
    name = "cuda_headers",
    hdrs = [":_cuda_header_files"],
    includes = ["cuda/include"],
)

cc_library(
    name = "cuda_stub",
    srcs = ["cuda/lib64/stubs/libcuda.so"],
    linkopts = if_linux([
        "-ldl",
        "-lpthread",
        "-lrt",
    ]),
)

cc_import(
    name = "cudart_so",
    shared_library = "cuda/lib64/libcudart.so",
    target_compatible_with = ["@platforms//os:linux"],
)

cc_library(
    name = "cudadevrt_a",
    srcs = ["cuda/lib64/libcudadevrt.a"],
    target_compatible_with = ["@platforms//os:linux"],
)

cc_import(
    name = "cudart_lib",
    interface_library = "cuda/lib/x64/cudart.lib",
    system_provided = 1,
    target_compatible_with = ["@platforms//os:windows"],
)

cc_import(
    name = "cudadevrt_lib",
    interface_library = "cuda/lib/x64/cudadevrt.lib",
    system_provided = 1,
    target_compatible_with = ["@platforms//os:windows"],
)

# Note: do not use this target directly, use the configurable label_flag
# @rules_cuda//cuda:runtime instead.
cc_library(
    name = "cuda_runtime",
    linkopts = if_linux([
        "-ldl",
        "-lpthread",
        "-lrt",
    ]),
    deps = [
        ":cuda_headers",
    ] + if_linux([
        # devrt is require for jit linking when rdc is enabled
        ":cudadevrt_a",
        ":cudart_so",
    ]) + if_windows([
        # devrt is require for jit linking when rdc is enabled
        ":cudadevrt_lib",
        ":cudart_lib",
    ]),
    # FIXME:
    # visibility = ["@rules_cuda//cuda:__pkg__"],
)

# Note: do not use this target directly, use the configurable label_flag
# @rules_cuda//cuda:runtime instead.
cc_library(
    name = "cuda_runtime_static",
    srcs = ["cuda/lib64/libcudart_static.a"],
    hdrs = [":_cuda_header_files"],
    includes = ["cuda/include"],
    linkopts = if_linux([
        "-ldl",
        "-lpthread",
        "-lrt",
    ]),
    deps = [":cudadevrt_a"],
    # FIXME:
    # visibility = ["@rules_cuda//cuda:__pkg__"],
)

cc_library(
    name = "no_cuda_runtime",
    # FIXME:
    # visibility = ["@rules_cuda//cuda:__pkg__"],
)

cc_import(
    name = "cuda_so",
    shared_library = "cuda/lib64/stubs/libcuda.so",
    target_compatible_with = ["@platforms//os:linux"],
)

cc_import(
    name = "cuda_lib",
    interface_library = "cuda/lib/x64/cuda.lib",
    system_provided = 1,
    target_compatible_with = ["@platforms//os:windows"],
)

cc_library(
    name = "cuda",
    deps = [
        ":cuda_headers",
    ] + if_linux([
        ":cuda_so",
    ]) + if_windows([
        ":cuda_lib",
    ]),
)

cc_import(
    name = "cublas_so",
    shared_library = "cuda/lib64/libcublas.so",
    target_compatible_with = ["@platforms//os:linux"],
)

cc_import(
    name = "cublasLt_so",
    shared_library = "cuda/lib64/libcublasLt.so",
    target_compatible_with = ["@platforms//os:linux"],
)

cc_import(
    name = "cublas_lib",
    interface_library = "cuda/lib/x64/cublas.lib",
    system_provided = 1,
    target_compatible_with = ["@platforms//os:windows"],
)

cc_import(
    name = "cublasLt_lib",
    interface_library = "cuda/lib/x64/cublasLt.lib",
    system_provided = 1,
    target_compatible_with = ["@platforms//os:windows"],
)

cc_library(
    name = "cublas",
    deps = [
        ":cuda_headers",
    ] + if_linux([
        ":cublasLt_so",
        ":cublas_so",
    ]) + if_windows([
        ":cublasLt_lib",
        ":cublas_lib",
    ]),
)

cc_library(
    name = "cub",
    hdrs = glob(["cuda/include/cub/**"]),
    includes = [
        "cuda/include",
    ],
)

cc_library(
    name = "thrust",
    hdrs = glob(["cuda/include/thrust/**"]),
    includes = [
        "cuda/include",
    ],
    deps = [":cub"],
)

# CUPTI
cc_import(
    name = "cupti_so",
    shared_library = "cuda/lib64/libcupti.so",
    target_compatible_with = ["@platforms//os:linux"],
)

cc_import(
    name = "cupti_lib",
    interface_library = "cuda/extras/CUPTI/lib64/cupti.lib",
    system_provided = 1,
    target_compatible_with = ["@platforms//os:windows"],
)

cc_library(
    name = "cupti_headers",
    hdrs = glob(["cuda/extras/CUPTI/include/*.h"]),
    includes = ["cuda/extras/CUPTI/include"],
)

cc_library(
    name = "cupti",
    deps = [
        ":cuda_headers",
    ] + if_linux([
        ":cupti_so",
    ]) + if_windows([
        ":cupti_headers",
        ":cupti_lib",
    ]),
)

# nvperf
cc_import(
    name = "nvperf_host_so",
    shared_library = "cuda/lib64/libnvperf_host.so",
    target_compatible_with = ["@platforms//os:linux"],
)

cc_import(
    name = "nvperf_host_lib",
    interface_library = "cuda/extras/CUPTI/lib64/nvperf_host.lib",
    system_provided = 1,
    target_compatible_with = ["@platforms//os:windows"],
)

cc_library(
    name = "nvperf_host",
    deps = [
        ":cuda_headers",
    ] + if_linux([
        ":nvperf_host_so",
    ]) + if_windows([
        ":cupti_headers",
        ":nvperf_host_lib",
    ]),
)

cc_import(
    name = "nvperf_target_so",
    shared_library = "cuda/lib64/libnvperf_target.so",
    target_compatible_with = ["@platforms//os:linux"],
)

cc_import(
    name = "nvperf_target_lib",
    interface_library = "cuda/extras/CUPTI/lib64/nvperf_target.lib",
    system_provided = 1,
    target_compatible_with = ["@platforms//os:windows"],
)

cc_library(
    name = "nvperf_target",
    deps = [
        ":cuda_headers",
    ] + if_linux([
        ":nvperf_target_so",
    ]) + if_windows([
        ":cupti_headers",
        ":nvperf_target_lib",
    ]),
)

# NVML
cc_import(
    name = "nvidia-ml_so",
    shared_library = "cuda/lib64/stubs/libnvidia-ml.so",
    target_compatible_with = ["@platforms//os:linux"],
)

cc_import(
    name = "nvml_lib",
    interface_library = "cuda/lib/x64/nvml.lib",
    system_provided = 1,
    target_compatible_with = ["@platforms//os:windows"],
)

cc_library(
    name = "nvml",
    deps = [
        ":cuda_headers",
    ] + if_linux([
        ":nvidia-ml_so",
    ]) + if_windows([
        ":nvml_lib",
    ]),
)
